// =============
// ANDRAO-LOGGER
// =============

'use strict';

const chalk = require('chalk'),
    onHeaders = require('on-headers'),
    onFinished = require('on-finished');

const opts = {
    log_pre:    '',
    error_pre:  '',
    req_filter: ['/css/', '/js/'],
    node_analytics: false,
    date: true
};

function Logger(opts_in){

    if(!opts_in)
        opts_in = {};

    // Set options
    if (typeof opts_in === 'string')
        set_pre(opts_in);
    else if(typeof this === 'string'){
        set_pre(this);
    }
    else {
        if(opts_in.pre)
            set_pre(opts_in.pre);

        for(let k in opts_in)
            opts[k] = opts_in[k];
    }

    const log = function(){
        let args = Array.prototype.slice.call(arguments);
        args = log.prefix(args);

        console.log.apply(console, args);
    };
    log.ignore = function(file, msg){
        let args = ['file ignored:', msg, '[', file.type, ']', file.path];
        args = log.prefix(args);    //prefix

        console.log.apply(console, args);
    };
    log.error = function(){
        let args = Array.prototype.slice.call(arguments);
        args = log.prefix(args, true);

        console.error.apply(console, args);
    };
    log.timer = function(page, past){
        log(chalk.cyan('TIMER'), '|', chalk.magenta(page), chalk.green((Date.now() - past) / 1000), 'seconds elapsed');
        return Date.now();
    };
    log.prefix = function(args, error){
        // [0] => prefix, [1] => date
        if(opts.date)
            args.unshift(log.date() + ' |');

        if(error) args.unshift(opts.error_pre);
        else args.unshift(opts.log_pre);

        return args;
    };
    log.date = function(){
        const d = new Date();
        return  d.getFullYear() + '/' +
            fZ(d.getMonth() + 1) + '/' +
            fZ(d.getDate()) + ' ' +
            fZ(d.getHours()) + ':' +
            fZ(d.getMinutes()) + ':' +
            fZ(d.getSeconds()) + ' ' +
            tz(d);

        // ====

        function fZ(v){ return ('0' + v).slice(-2); }
        function tz(d){
            const m = d.getTimezoneOffset() / 60;
            return m >= 0 ? 'GMT+' + m : 'GMT' + m;
        }
    };
    log.session = function(session){

        let args = Array.prototype.slice.call(arguments);

        // build ident
        if(session){
            let ident = session.name || session.user.substr(session.user.length - 6);
            const colour = session.new_user ? 'green' : session.new_session ? 'yellow' : 'grey';

            ident = chalk[colour](ident);

            if(session.geo){
                const ks = ['city', 'state', 'country'];
                ks.forEach(function(k){
                    if(session.geo[k])
                        ident += chalk.grey(`, ${session.geo[k]}`);
                });
            }

            // substitute ident for session in args
            args[0] = ident + ' |';
        }
        else
            args = args.slice(1);


        // add prefix to start
        args = log.prefix(args);

        console.log.apply(console, args);
    };
    log.request = function(req, res, next){
        for(let i = 0; i < opts.req_filter.length; i++){
            if(req.originalUrl.indexOf(opts.req_filter[i]) > -1)
                return next();
        }

        onHeaders(res, log_start.bind(res));
        onFinished(res, req_log);

        next();

        // =========

        function log_start(){
            this._log_start = process.hrtime();
        }
        function req_log(){
            const sc = res.statusCode < 400 ? 'green' : 'red';
            const ms = nano_time(res._log_start);

            const user = req._log_user ? chalk.blue(req._log_user) : chalk.grey(req.ip);
            let ref = req.get('referrer') || req.get('referer');
            if(ref){
                ref = ref.replace('http://', '');
                ref = ref.replace('https://', '');
            }


            // Args
            const args = [chalk.cyan('REQUEST'),'|'];

            if(opts.date)
                args.push(log.date(),'|');

            args.push(user);

            if(ref)
                args.push(chalk.grey(`from ${ref}`));

            args.push('|');

            args.push(req.method, chalk[sc](res.statusCode), ':', `${ms} ms`, '|',
                chalk.magenta(req.originalUrl)
            );

            console.log.apply(log, args);

            // ===

            function nano_time(start){
                let t = conv(process.hrtime()) - conv(start);   // ns
                t = Math.round(t / 1000);                       // Âµs
                return t / 1000;                                // ms [3 dec]

                // ====

                function conv(t){
                    if(!t | typeof t[0] === 'undefined')
                        return 0;

                    return t[0] * 1e9 + t[1];
                }
            }
        }
    };

    return log;

    // =========

    function set_pre(pre){
        opts.log_pre = chalk.green(pre) + ' |';
        opts.error_pre = chalk.green(pre) + ' ' + chalk.red('ERROR') + ' |';
    }
}

// =============

module.exports = Logger;